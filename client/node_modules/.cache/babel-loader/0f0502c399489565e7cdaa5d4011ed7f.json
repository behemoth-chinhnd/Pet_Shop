{"ast":null,"code":"import { mapActions } from \"vuex\";\nexport default {\n  name: \"CreateData\",\n\n  data() {\n    return {\n      errors: {\n        username: \"\",\n        email: \"\",\n        password: \"\"\n      },\n      users: [],\n      user: {\n        id: \"\",\n        uid: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        create_at: \"\"\n      }\n    };\n  },\n\n  created() {\n    const userId = this.$route.params.id;\n    console.log(userId);\n\n    if (userId) {\n      this.getUser(userId);\n    }\n\n    this.getAll();\n  },\n\n  methods: { ...mapActions([\"\"]),\n\n    validate() {\n      let isValid = true;\n      this.errors = {\n        username: \"\",\n        email: \"\",\n        password: \"\"\n      };\n\n      if (!this.user.username) {\n        this.errors.username = \"Error: username not Empty\";\n        isValid = false;\n      }\n\n      if (!this.user.email) {\n        this.errors.email = \"Error: Email not Empty \";\n        isValid = false;\n      }\n\n      if (!this.user.password) {\n        this.errors.password = \"Error: Password not Empty \";\n        isValid = false;\n      }\n\n      return isValid;\n    },\n\n    isNumber(value) {\n      return /^\\d*$/.test(value);\n    },\n\n    async save() {\n      if (this.validate()) {\n        if (this.user.id) {\n          this.$request.put(`http://localhost:8000/api/users/${this.user.id}`, this.user).then(res => {\n            if (res.data.success) {\n              this.$router.push({\n                name: \"admin.managements.users\"\n              });\n              return;\n            }\n\n            alert(\"Errors\");\n          });\n          return;\n        }\n\n        await this.getAll();\n        let max = 0;\n        let newID = 0; // console.log(newID)\n\n        for (let i = 0; i < this.users.length; i++) {\n          console.log(this.users.length);\n\n          if (this.users[i].uid > max) {\n            max = this.users[i].uid;\n          } // return this.user.id\n\n        }\n\n        newID = max + 1;\n        this.user.uid = newID;\n        console.log(newID);\n        this.user.create_at = new Date().toLocaleString();\n        this.user.uid = newID;\n\n        var md5 = require(\"md5\");\n\n        this.user.password = md5(this.user.password);\n        this.$request.post(\"http://localhost:8000/api/users\", this.user).then(res => {\n          console.log(res);\n\n          if (res.data.success) {// this.$router.push({ name: \"admin.managements.users\" });\n          } else if (!res.data.success) {\n            alert(\"Đã Tồn Tại\");\n          }\n        });\n      }\n    },\n\n    getuser(userId) {\n      this.$request.get(`http://localhost:8000/api/users/${userId}`).then(res => {\n        this.user = res.data; // console.log(this.user)\n      });\n    },\n\n    reset() {\n      this.user.username = \"\", this.user.email = \"\", this.user.password = \"\";\n    },\n\n    async getAll() {\n      console.log(this.builUrl());\n      await this.$request.get(this.builUrl()).then(res => {\n        this.users = res.data; // sort price\n        // this.users = this.users.sort((a, b) => a.price - b.price);\n        // sort reverse\n\n        this.users = this.users.reverse();\n\n        var md5 = require(\"md5\");\n\n        console.log(md5(\"message\"));\n      });\n    },\n\n    builUrl() {\n      // let p = this.params;\n      // return `http://localhost:8000/api/users?page=${p.page}&per_page=${p.per_page}&sort_column=${p.sort_column}&direction=${p.direction}&search_column=${p.search_column}&search_operator=${p.search_operator}&search_query_1=${p.search_query_1}&search_query_2=${p.search_query_2}`;\n      return `http://localhost:8000/api/users`;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAgFA;AACA;EACAA,kBADA;;EAEAC;IACA;MACAC;QACAC,YADA;QAEAC,SAFA;QAGAC;MAHA,CADA;MAMAC,SANA;MAOAC;QACAC,MADA;QAEAC,OAFA;QAGAN,YAHA;QAIAC,SAJA;QAKAC,YALA;QAMAK;MANA;IAPA;EAgBA,CAnBA;;EAoBAC;IACA;IACAC;;IACA;MACA;IACA;;IACA;EACA,CA3BA;;EA4BAC,WACA,mBADA;;IAEAC;MACA;MACA;QACAX,YADA;QAEAC,SAFA;QAGAC;MAHA;;MAKA;QACA;QACAU;MACA;;MACA;QACA;QACAA;MACA;;MACA;QACA;QACAA;MACA;;MACA;IACA,CAtBA;;IAuBAC;MACA;IACA,CAzBA;;IA0BA;MACA;QACA;UACA,cACAC,GADA,CACA,iDADA,EACA,SADA,EAEAC,IAFA,CAEAC;YACA;cACA;gBAAAnB;cAAA;cACA;YACA;;YACAoB;UACA,CARA;UASA;QACA;;QACA;QACA;QACA,cAfA,CAgBA;;QACA;UACAR;;UACA;YACAS;UACA,CAJA,CAKA;;QACA;;QACAC;QACA;QACAV;QACA;QACA;;QACA;;QACA;QACA;UACAA;;UACA,uBACA;UACA,CAFA,MAEA;YACAQ;UACA;QACA,CAPA;MAQA;IACA,CAnEA;;IAoEAG;MACA;QACA,qBADA,CAEA;MACA,CAHA;IAIA,CAzEA;;IA0EAC;MACA;IACA,CA5EA;;IA6EA;MACAZ;MACA;QACA,sBADA,CAEA;QACA;QACA;;QACA;;QACA;;QACAA;MACA,CARA;IASA,CAxFA;;IAyFAa;MACA;MACA;MACA;IACA;;EA7FA;AA5BA","names":["name","data","errors","username","email","password","users","user","id","uid","create_at","created","console","methods","validate","isValid","isNumber","put","then","res","alert","max","newID","getuser","reset","builUrl"],"sourceRoot":"src/components/users","sources":["CreateUser.vue"],"sourcesContent":["<template>\r\n  <div class=\"body\">\r\n    <section id=\"main-body\">\r\n      <div class=\"add-user\">\r\n        <div class=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\r\n          <h3 class=\"display-5\">user Information</h3>\r\n          <router-link to=\"/admin/management/users\">Back</router-link>\r\n        </div>\r\n        <div class=\"container\">\r\n          <form\r\n            action=\"\"\r\n            @submit.prevent=\"save()\"\r\n            class=\"needs-validation text-left\"\r\n            novalidate\r\n          >\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputUsername\" class=\"col-md-3 col-form-label\">Username</label>\r\n              <div class=\"col-md-9\">\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  v-model=\"user.username\"\r\n                  @blur=\"validate()\"\r\n                  v-bind:class=\"{ 'is-invalid': errors.username }\"\r\n                  required\r\n                />\r\n                <div class=\"feedback-invalid\" v-if=\"errors.username\">\r\n                  {{ errors.username }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputEmail\" class=\"col-md-3 col-form-label\">Email</label>\r\n              <div class=\"col-md-9\">\r\n                <input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  class=\"form-control\"\r\n                  v-model.number=\"user.email\"\r\n                  @blur=\"validate()\"\r\n                  v-bind:class=\"{ 'is-invalid': errors.email }\"\r\n                  required\r\n                />\r\n                <div class=\"feedback-invalid\" v-if=\"errors.email\">\r\n                  {{ errors.email }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"input\" class=\"col-md-3 col-form-label\">Password</label>\r\n              <div class=\"col-md-9\">\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  v-model=\"user.password\"\r\n                  @blur=\"validate()\"\r\n                  v-bind:class=\"{ 'is-invalid': errors.password }\"\r\n                  required\r\n                />\r\n                <div class=\"feedback-invalid\" v-if=\"errors.password\">\r\n                  {{ errors.password }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"input\" class=\"col-md-3 col-form-label\"></label>\r\n              <div class=\"col-md-9\">\r\n                <div class=\"left group-btn\">\r\n                  <b-button type=\"submit\" variant=\"primary \">Save</b-button>\r\n                  <b-button variant=\"danger mgl-10px\" @click=\"reset()\">Reset</b-button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapActions } from \"vuex\";\r\nexport default {\r\n  name: \"CreateData\",\r\n  data() {\r\n    return {\r\n      errors: {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n      users: [],\r\n      user: {\r\n        id: \"\",\r\n        uid: \"\",\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        create_at: \"\",\r\n      },\r\n    };\r\n  },\r\n  created() {\r\n    const userId = this.$route.params.id;\r\n    console.log(userId);\r\n    if (userId) {\r\n      this.getUser(userId);\r\n    }\r\n    this.getAll();\r\n  },\r\n  methods: {\r\n    ...mapActions([\"\"]),\r\n    validate() {\r\n      let isValid = true;\r\n      this.errors = {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      };\r\n      if (!this.user.username) {\r\n        this.errors.username = \"Error: username not Empty\";\r\n        isValid = false;\r\n      }\r\n      if (!this.user.email) {\r\n        this.errors.email = \"Error: Email not Empty \";\r\n        isValid = false;\r\n      }\r\n      if (!this.user.password) {\r\n        this.errors.password = \"Error: Password not Empty \";\r\n        isValid = false;\r\n      }\r\n      return isValid;\r\n    },\r\n    isNumber(value) {\r\n      return /^\\d*$/.test(value);\r\n    },\r\n    async save() {\r\n      if (this.validate()) {\r\n        if (this.user.id) {\r\n          this.$request\r\n            .put(`http://localhost:8000/api/users/${this.user.id}`, this.user)\r\n            .then((res) => {\r\n              if (res.data.success) {\r\n                this.$router.push({ name: \"admin.managements.users\" });\r\n                return;\r\n              }\r\n              alert(\"Errors\");\r\n            });\r\n          return;\r\n        }\r\n        await this.getAll();\r\n        let max = 0;\r\n        let newID = 0;\r\n        // console.log(newID)\r\n        for (let i = 0; i < this.users.length; i++) {\r\n          console.log(this.users.length);\r\n          if (this.users[i].uid > max) {\r\n            max = this.users[i].uid;\r\n          }\r\n          // return this.user.id\r\n        }\r\n        newID = max + 1;\r\n        this.user.uid = newID;\r\n        console.log(newID);\r\n        this.user.create_at = new Date().toLocaleString();\r\n        this.user.uid = newID;\r\n        var md5 = require(\"md5\");\r\n        this.user.password = md5(this.user.password);\r\n        this.$request.post(\"http://localhost:8000/api/users\", this.user).then((res) => {\r\n          console.log(res);\r\n          if (res.data.success) {\r\n            // this.$router.push({ name: \"admin.managements.users\" });\r\n          } else if (!res.data.success) {\r\n            alert(\"Đã Tồn Tại\");\r\n          }\r\n        });\r\n      }\r\n    },\r\n    getuser(userId) {\r\n      this.$request.get(`http://localhost:8000/api/users/${userId}`).then((res) => {\r\n        this.user = res.data;\r\n        // console.log(this.user)\r\n      });\r\n    },\r\n    reset() {\r\n      (this.user.username = \"\"), (this.user.email = \"\"), (this.user.password = \"\");\r\n    },\r\n    async getAll() {\r\n      console.log(this.builUrl());\r\n      await this.$request.get(this.builUrl()).then((res) => {\r\n        this.users = res.data;\r\n        // sort price\r\n        // this.users = this.users.sort((a, b) => a.price - b.price);\r\n        // sort reverse\r\n        this.users = this.users.reverse();\r\n        var md5 = require(\"md5\");\r\n        console.log(md5(\"message\"));\r\n      });\r\n    },\r\n    builUrl() {\r\n      // let p = this.params;\r\n      // return `http://localhost:8000/api/users?page=${p.page}&per_page=${p.per_page}&sort_column=${p.sort_column}&direction=${p.direction}&search_column=${p.search_column}&search_operator=${p.search_operator}&search_query_1=${p.search_query_1}&search_query_2=${p.search_query_2}`;\r\n      return `http://localhost:8000/api/users`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.form-group {\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}