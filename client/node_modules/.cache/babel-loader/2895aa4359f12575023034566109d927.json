{"ast":null,"code":"import globalState from '../globalState.js';\nimport privateMethods from '../privateMethods.js';\nimport privateProps from '../privateProps.js';\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this);\n  const innerParams = privateProps.innerParams.get(this);\n\n  if (!innerParams) {\n    disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n\n    return; // This instance has already been destroyed\n  } // Check if there is another Swal closing\n\n\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  }\n\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy();\n  }\n\n  disposeSwal(this);\n}\n/**\n * @param {SweetAlert2} instance\n */\n\nconst disposeSwal = instance => {\n  disposeWeakMaps(instance); // Unset this.params so GC will dispose it (#1569)\n  // @ts-ignore\n\n  delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget; // Unset currentInstance\n\n  delete globalState.currentInstance;\n};\n/**\n * @param {SweetAlert2} instance\n */\n\n\nconst disposeWeakMaps = instance => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  // @ts-ignore\n  if (instance.isAwaitingPromise()) {\n    unsetWeakMaps(privateProps, instance);\n    privateProps.awaitingPromise.set(instance, true);\n  } else {\n    unsetWeakMaps(privateMethods, instance);\n    unsetWeakMaps(privateProps, instance);\n  }\n};\n/**\n * @param {object} obj\n * @param {SweetAlert2} instance\n */\n\n\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance);\n  }\n};","map":{"version":3,"names":["globalState","privateMethods","privateProps","_destroy","domCache","get","innerParams","disposeWeakMaps","popup","swalCloseEventFinishedCallback","didDestroy","disposeSwal","instance","params","keydownHandler","keydownTarget","currentInstance","isAwaitingPromise","unsetWeakMaps","awaitingPromise","set","obj","i","delete"],"sources":["E:/Behemoth/Project/node_modules/sweetalert2/src/instanceMethods/_destroy.js"],"sourcesContent":["import globalState from '../globalState.js'\nimport privateMethods from '../privateMethods.js'\nimport privateProps from '../privateProps.js'\n\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this)\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!innerParams) {\n    disposeWeakMaps(this) // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n    return // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback()\n    delete globalState.swalCloseEventFinishedCallback\n  }\n\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy()\n  }\n  disposeSwal(this)\n}\n\n/**\n * @param {SweetAlert2} instance\n */\nconst disposeSwal = (instance) => {\n  disposeWeakMaps(instance)\n  // Unset this.params so GC will dispose it (#1569)\n  // @ts-ignore\n  delete instance.params\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler\n  delete globalState.keydownTarget\n  // Unset currentInstance\n  delete globalState.currentInstance\n}\n\n/**\n * @param {SweetAlert2} instance\n */\nconst disposeWeakMaps = (instance) => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  // @ts-ignore\n  if (instance.isAwaitingPromise()) {\n    unsetWeakMaps(privateProps, instance)\n    privateProps.awaitingPromise.set(instance, true)\n  } else {\n    unsetWeakMaps(privateMethods, instance)\n    unsetWeakMaps(privateProps, instance)\n  }\n}\n\n/**\n * @param {object} obj\n * @param {SweetAlert2} instance\n */\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance)\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA,OAAO,SAASC,QAAT,GAAoB;EACzB,MAAMC,QAAQ,GAAGF,YAAY,CAACE,QAAb,CAAsBC,GAAtB,CAA0B,IAA1B,CAAjB;EACA,MAAMC,WAAW,GAAGJ,YAAY,CAACI,WAAb,CAAyBD,GAAzB,CAA6B,IAA7B,CAApB;;EAEA,IAAI,CAACC,WAAL,EAAkB;IAChBC,eAAe,CAAC,IAAD,CAAf,CADgB,CACM;;IACtB,OAFgB,CAET;EACR,CAPwB,CASzB;;;EACA,IAAIH,QAAQ,CAACI,KAAT,IAAkBR,WAAW,CAACS,8BAAlC,EAAkE;IAChET,WAAW,CAACS,8BAAZ;IACA,OAAOT,WAAW,CAACS,8BAAnB;EACD;;EAED,IAAI,OAAOH,WAAW,CAACI,UAAnB,KAAkC,UAAtC,EAAkD;IAChDJ,WAAW,CAACI,UAAZ;EACD;;EACDC,WAAW,CAAC,IAAD,CAAX;AACD;AAED;AACA;AACA;;AACA,MAAMA,WAAW,GAAIC,QAAD,IAAc;EAChCL,eAAe,CAACK,QAAD,CAAf,CADgC,CAEhC;EACA;;EACA,OAAOA,QAAQ,CAACC,MAAhB,CAJgC,CAKhC;;EACA,OAAOb,WAAW,CAACc,cAAnB;EACA,OAAOd,WAAW,CAACe,aAAnB,CAPgC,CAQhC;;EACA,OAAOf,WAAW,CAACgB,eAAnB;AACD,CAVD;AAYA;AACA;AACA;;;AACA,MAAMT,eAAe,GAAIK,QAAD,IAAc;EACpC;EACA;EACA,IAAIA,QAAQ,CAACK,iBAAT,EAAJ,EAAkC;IAChCC,aAAa,CAAChB,YAAD,EAAeU,QAAf,CAAb;IACAV,YAAY,CAACiB,eAAb,CAA6BC,GAA7B,CAAiCR,QAAjC,EAA2C,IAA3C;EACD,CAHD,MAGO;IACLM,aAAa,CAACjB,cAAD,EAAiBW,QAAjB,CAAb;IACAM,aAAa,CAAChB,YAAD,EAAeU,QAAf,CAAb;EACD;AACF,CAVD;AAYA;AACA;AACA;AACA;;;AACA,MAAMM,aAAa,GAAG,CAACG,GAAD,EAAMT,QAAN,KAAmB;EACvC,KAAK,MAAMU,CAAX,IAAgBD,GAAhB,EAAqB;IACnBA,GAAG,CAACC,CAAD,CAAH,CAAOC,MAAP,CAAcX,QAAd;EACD;AACF,CAJD"},"metadata":{},"sourceType":"module"}