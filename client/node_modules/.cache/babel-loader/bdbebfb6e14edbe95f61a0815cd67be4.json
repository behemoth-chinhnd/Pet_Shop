{"ast":null,"code":"import { handleAwaitingPromise } from './instanceMethods.js';\nimport privateProps from './privateProps.js';\nimport { showLoading } from './staticMethods/showLoading.js';\nimport { DismissReason } from './utils/DismissReason.js';\nimport { isVisible } from './utils/dom/domUtils.js';\nimport { getDenyButton, getValidationMessage } from './utils/dom/getters.js';\nimport { getInputValue } from './utils/dom/inputUtils.js';\nimport { asPromise, capitalizeFirstLetter, error } from './utils/utils.js';\n/**\n * @param {SweetAlert2} instance\n */\n\nexport const handleConfirmButtonClick = instance => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableButtons();\n\n  if (innerParams.input) {\n    handleConfirmOrDenyWithInput(instance, 'confirm');\n  } else {\n    confirm(instance, true);\n  }\n};\n/**\n * @param {SweetAlert2} instance\n */\n\nexport const handleDenyButtonClick = instance => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableButtons();\n\n  if (innerParams.returnInputValueOnDeny) {\n    handleConfirmOrDenyWithInput(instance, 'deny');\n  } else {\n    deny(instance, false);\n  }\n};\n/**\n * @param {SweetAlert2} instance\n * @param {Function} dismissWith\n */\n\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons();\n  dismissWith(DismissReason.cancel);\n};\n/**\n * @param {SweetAlert2} instance\n * @param {'confirm' | 'deny'} type\n */\n\nconst handleConfirmOrDenyWithInput = (instance, type) => {\n  const innerParams = privateProps.innerParams.get(instance);\n\n  if (!innerParams.input) {\n    error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);\n    return;\n  }\n\n  const inputValue = getInputValue(instance, innerParams);\n\n  if (innerParams.inputValidator) {\n    handleInputValidator(instance, inputValue, type);\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons();\n    instance.showValidationMessage(innerParams.validationMessage);\n  } else if (type === 'deny') {\n    deny(instance, inputValue);\n  } else {\n    confirm(instance, inputValue);\n  }\n};\n/**\n * @param {SweetAlert2} instance\n * @param {string} inputValue\n * @param {'confirm' | 'deny'} type\n */\n\n\nconst handleInputValidator = (instance, inputValue, type) => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableInput();\n  const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\n  validationPromise.then(validationMessage => {\n    instance.enableButtons();\n    instance.enableInput();\n\n    if (validationMessage) {\n      instance.showValidationMessage(validationMessage);\n    } else if (type === 'deny') {\n      deny(instance, inputValue);\n    } else {\n      confirm(instance, inputValue);\n    }\n  });\n};\n/**\n * @param {SweetAlert2} instance\n * @param {any} value\n */\n\n\nconst deny = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this);\n\n  if (innerParams.showLoaderOnDeny) {\n    showLoading(getDenyButton());\n  }\n\n  if (innerParams.preDeny) {\n    privateProps.awaitingPromise.set(instance || this, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n\n    const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\n    preDenyPromise.then(preDenyValue => {\n      if (preDenyValue === false) {\n        instance.hideLoading();\n        handleAwaitingPromise(instance);\n      } else {\n        instance.close({\n          isDenied: true,\n          value: typeof preDenyValue === 'undefined' ? value : preDenyValue\n        });\n      }\n    }).catch(error => rejectWith(instance || this, error));\n  } else {\n    instance.close({\n      isDenied: true,\n      value\n    });\n  }\n};\n/**\n * @param {SweetAlert2} instance\n * @param {any} value\n */\n\n\nconst succeedWith = (instance, value) => {\n  instance.close({\n    isConfirmed: true,\n    value\n  });\n};\n/**\n *\n * @param {SweetAlert2} instance\n * @param {string} error\n */\n\n\nconst rejectWith = (instance, error) => {\n  // @ts-ignore\n  instance.rejectPromise(error);\n};\n/**\n *\n * @param {SweetAlert2} instance\n * @param {any} value\n */\n\n\nconst confirm = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this);\n\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading();\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage();\n    privateProps.awaitingPromise.set(instance || this, true); // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n\n    const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\n    preConfirmPromise.then(preConfirmValue => {\n      if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n        instance.hideLoading();\n        handleAwaitingPromise(instance);\n      } else {\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n      }\n    }).catch(error => rejectWith(instance || this, error));\n  } else {\n    succeedWith(instance, value);\n  }\n};","map":{"version":3,"names":["handleAwaitingPromise","privateProps","showLoading","DismissReason","isVisible","getDenyButton","getValidationMessage","getInputValue","asPromise","capitalizeFirstLetter","error","handleConfirmButtonClick","instance","innerParams","get","disableButtons","input","handleConfirmOrDenyWithInput","confirm","handleDenyButtonClick","returnInputValueOnDeny","deny","handleCancelButtonClick","dismissWith","cancel","type","inputValue","inputValidator","handleInputValidator","getInput","checkValidity","enableButtons","showValidationMessage","validationMessage","disableInput","validationPromise","Promise","resolve","then","enableInput","value","showLoaderOnDeny","preDeny","awaitingPromise","set","preDenyPromise","preDenyValue","hideLoading","close","isDenied","catch","rejectWith","succeedWith","isConfirmed","rejectPromise","showLoaderOnConfirm","preConfirm","resetValidationMessage","preConfirmPromise","preConfirmValue"],"sources":["E:/Behemoth/Project/node_modules/sweetalert2/src/buttons-handlers.js"],"sourcesContent":["import { handleAwaitingPromise } from './instanceMethods.js'\nimport privateProps from './privateProps.js'\nimport { showLoading } from './staticMethods/showLoading.js'\nimport { DismissReason } from './utils/DismissReason.js'\nimport { isVisible } from './utils/dom/domUtils.js'\nimport { getDenyButton, getValidationMessage } from './utils/dom/getters.js'\nimport { getInputValue } from './utils/dom/inputUtils.js'\nimport { asPromise, capitalizeFirstLetter, error } from './utils/utils.js'\n\n/**\n * @param {SweetAlert2} instance\n */\nexport const handleConfirmButtonClick = (instance) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableButtons()\n  if (innerParams.input) {\n    handleConfirmOrDenyWithInput(instance, 'confirm')\n  } else {\n    confirm(instance, true)\n  }\n}\n\n/**\n * @param {SweetAlert2} instance\n */\nexport const handleDenyButtonClick = (instance) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableButtons()\n  if (innerParams.returnInputValueOnDeny) {\n    handleConfirmOrDenyWithInput(instance, 'deny')\n  } else {\n    deny(instance, false)\n  }\n}\n\n/**\n * @param {SweetAlert2} instance\n * @param {Function} dismissWith\n */\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons()\n  dismissWith(DismissReason.cancel)\n}\n\n/**\n * @param {SweetAlert2} instance\n * @param {'confirm' | 'deny'} type\n */\nconst handleConfirmOrDenyWithInput = (instance, type) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  if (!innerParams.input) {\n    error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`)\n    return\n  }\n  const inputValue = getInputValue(instance, innerParams)\n  if (innerParams.inputValidator) {\n    handleInputValidator(instance, inputValue, type)\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons()\n    instance.showValidationMessage(innerParams.validationMessage)\n  } else if (type === 'deny') {\n    deny(instance, inputValue)\n  } else {\n    confirm(instance, inputValue)\n  }\n}\n\n/**\n * @param {SweetAlert2} instance\n * @param {string} inputValue\n * @param {'confirm' | 'deny'} type\n */\nconst handleInputValidator = (instance, inputValue, type) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableInput()\n  const validationPromise = Promise.resolve().then(() =>\n    asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage))\n  )\n  validationPromise.then((validationMessage) => {\n    instance.enableButtons()\n    instance.enableInput()\n    if (validationMessage) {\n      instance.showValidationMessage(validationMessage)\n    } else if (type === 'deny') {\n      deny(instance, inputValue)\n    } else {\n      confirm(instance, inputValue)\n    }\n  })\n}\n\n/**\n * @param {SweetAlert2} instance\n * @param {any} value\n */\nconst deny = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this)\n\n  if (innerParams.showLoaderOnDeny) {\n    showLoading(getDenyButton())\n  }\n\n  if (innerParams.preDeny) {\n    privateProps.awaitingPromise.set(instance || this, true) // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n    const preDenyPromise = Promise.resolve().then(() =>\n      asPromise(innerParams.preDeny(value, innerParams.validationMessage))\n    )\n    preDenyPromise\n      .then((preDenyValue) => {\n        if (preDenyValue === false) {\n          instance.hideLoading()\n          handleAwaitingPromise(instance)\n        } else {\n          instance.close({ isDenied: true, value: typeof preDenyValue === 'undefined' ? value : preDenyValue })\n        }\n      })\n      .catch((error) => rejectWith(instance || this, error))\n  } else {\n    instance.close({ isDenied: true, value })\n  }\n}\n\n/**\n * @param {SweetAlert2} instance\n * @param {any} value\n */\nconst succeedWith = (instance, value) => {\n  instance.close({ isConfirmed: true, value })\n}\n\n/**\n *\n * @param {SweetAlert2} instance\n * @param {string} error\n */\nconst rejectWith = (instance, error) => {\n  // @ts-ignore\n  instance.rejectPromise(error)\n}\n\n/**\n *\n * @param {SweetAlert2} instance\n * @param {any} value\n */\nconst confirm = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this)\n\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading()\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage()\n    privateProps.awaitingPromise.set(instance || this, true) // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n    const preConfirmPromise = Promise.resolve().then(() =>\n      asPromise(innerParams.preConfirm(value, innerParams.validationMessage))\n    )\n    preConfirmPromise\n      .then((preConfirmValue) => {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading()\n          handleAwaitingPromise(instance)\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue)\n        }\n      })\n      .catch((error) => rejectWith(instance || this, error))\n  } else {\n    succeedWith(instance, value)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}