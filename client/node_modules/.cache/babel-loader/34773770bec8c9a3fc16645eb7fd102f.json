{"ast":null,"code":"export default {\n  name: \"ProductData\",\n\n  data() {\n    return {\n      errors: {\n        name: \"\"\n      },\n      user: {\n        id: \"\",\n        name: \"\",\n        time: \"\"\n      }\n    };\n  },\n\n  created() {\n    const userId = this.$route.params.id;\n    console.log(userId);\n\n    if (userId) {\n      this.getUsers(userId);\n    }\n  },\n\n  methods: {\n    validate() {\n      let isValid = true;\n      this.errors = {\n        name: \"\"\n      };\n\n      if (!this.user.name) {\n        this.errors.name = \"Error name\";\n        isValid = false;\n      } //       if (!this.product.price) {\n      //         this.errors.price = \"Error price\";\n      //         isValid = false;\n      //       } else if (!this.isNumber(this.product.price)) {\n      //         this.errors.price = \"price is Number\";\n      //         isValid = false;\n      //       }\n\n\n      if (!this.user.description) {\n        this.errors.description = \"Loi description\";\n        isValid = false;\n      }\n\n      return isValid;\n    },\n\n    isNumber(value) {\n      return /^\\d*$/.test(value);\n    },\n\n    save() {\n      if (this.validate()) {\n        if (this.user.id) {\n          this.$request.put(`http://localhost:8000/api/users/${this.user.id}`, this.user).then(res => {\n            if (res.data.success) {\n              this.$router.push({\n                name: \"user.list\"\n              });\n              return;\n            }\n\n            alert(\"Errors\");\n          });\n          return;\n        } // let max = 0\n        // let newID = 0\n        // // console.log(newID)\n        // for (let i = 0; i < this.products.length; i++) {\n        //   console.log(this.products.length)\n        //   if (this.products[i].id > max) {\n        //     max = this.products[i].id\n        //   }\n        //   // return this.product.id\n        // }\n        // newID = max + 1\n        // this.product.id = newID\n        // console.log(newID)\n\n\n        this.product.time = new Date().toLocaleString();\n        this.$request.post(\"http://localhost:8000/api/users\", this.user).then(res => {\n          if (res.data.success) {\n            this.$router.push({\n              name: \"product.list\"\n            });\n          }\n        });\n      }\n    },\n\n    getUsers(userId) {\n      this.$request.get(`http://localhost:8000/api/users/${userId}`).then(res => {\n        this.user = res.data; // console.log(this.product)\n      });\n    },\n\n    reset() {\n      this.user.name = \"\", this.user.price = \"\", this.user.description = \"\";\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA+EA;EACAA,mBADA;;EAEAC;IACA;MACAC;QACAF;MADA,CADA;MAIAG;QACAC,MADA;QAEAJ,QAFA;QAGAK;MAHA;IAJA;EAUA,CAbA;;EAcAC;IACA;IACAC;;IACA;MACA;IACA;EACA,CApBA;;EAqBAC;IACAC;MACA;MACA;QACAT;MADA;;MAGA;QACA;QACAU;MACA,CARA,CASA;MACA;MACA;MACA;MACA;MACA;MACA;;;MACA;QACA;QACAA;MACA;;MACA;IACA,CAtBA;;IAuBAC;MACA;IACA,CAzBA;;IA0BAC;MACA;QACA;UACA,cACAC,GADA,CACA,iDADA,EACA,SADA,EAEAC,IAFA,CAEAC;YACA;cACA;gBAAAf;cAAA;cACA;YACA;;YACAgB;UACA,CARA;UASA;QACA,CAZA,CAaA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;;QACA;QACA,cACAC,IADA,CACA,iCADA,EACA,SADA,EAEAH,IAFA,CAEAC;UACA;YACA;cAAAf;YAAA;UACA;QACA,CANA;MAOA;IACA,CA9DA;;IA+DAkB;MACA;QACA,qBADA,CAEA;MACA,CAHA;IAIA,CApEA;;IAqEAC;MACA,qBACA,oBADA,EAEA,0BAFA;IAGA;;EAzEA;AArBA","names":["name","data","errors","user","id","time","created","console","methods","validate","isValid","isNumber","save","put","then","res","alert","post","getUsers","reset"],"sourceRoot":"src/components/users","sources":["CreateUser.vue"],"sourcesContent":["<template>\r\n  <div class=\"body\">\r\n    <section id=\"main-body\">\r\n      <div class=\"add-product\">\r\n        <div class=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\r\n          <h3 class=\"display-5\">Users Information</h3>\r\n          <router-link to=\"/users\">Back</router-link>\r\n        </div>\r\n        <div class=\"container\">\r\n          <form\r\n            action=\"\"\r\n            @submit.prevent=\"save()\"\r\n            class=\"needs-validation text-left\"\r\n            novalidate\r\n          >\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputName\" class=\"col-md-3 col-form-label\">User Name</label>\r\n              <div class=\"col-md-9\">\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  v-model=\"user.name\"\r\n                  @blur=\"validate()\"\r\n                  v-bind:class=\"{ 'is-invalid': errors.name }\"\r\n                  required\r\n                />\r\n                <div class=\"feedback-invalid\" v-if=\"errors.name\">{{ errors.name }}</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputPrice\" class=\"col-md-3 col-form-label\"\r\n                >Product Price</label\r\n              >\r\n              <div class=\"col-md-9\">\r\n                <input\r\n                  type=\"number\"\r\n                  class=\"form-control\"\r\n                  v-model.number=\"user.price\"\r\n                  @blur=\"validate()\"\r\n                  v-bind:class=\"{ 'is-invalid': errors.price }\"\r\n                  required\r\n                />\r\n                <div class=\"feedback-invalid\" v-if=\"errors.price\">{{ errors.price }}</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputDescription\" class=\"col-md-3 col-form-label\"\r\n                >Product Description</label\r\n              >\r\n              <!-- <div class=\"col-md-9\">\r\n                <textarea\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  v-model=\"user.description\"\r\n                  @blur=\"validate()\"\r\n                  v-bind:class=\"{ 'is-invalid': errors.description }\"\r\n                  required\r\n                ></textarea>\r\n                <div class=\"feedback-invalid\" v-if=\"errors.description\">\r\n                  {{ errors.description }}\r\n                </div> -->\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputDescription\" class=\"col-md-3 col-form-label\"></label>\r\n              <div class=\"col-md-9\">\r\n                <div class=\"left group-btn\">\r\n                  <b-button type=\"submit\" variant=\"primary \">Save</b-button>\r\n                  <b-button variant=\"danger mgl-10px\" @click=\"reset()\">Reset</b-button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ProductData\",\r\n  data() {\r\n    return {\r\n      errors: {\r\n        name: \"\",\r\n      },\r\n      user: {\r\n        id: \"\",\r\n        name: \"\",\r\n        time: \"\",\r\n      },\r\n    };\r\n  },\r\n  created() {\r\n    const userId = this.$route.params.id;\r\n    console.log(userId);\r\n    if (userId) {\r\n      this.getUsers(userId);\r\n    }\r\n  },\r\n  methods: {\r\n    validate() {\r\n      let isValid = true;\r\n      this.errors = {\r\n        name: \"\",\r\n      };\r\n      if (!this.user.name) {\r\n        this.errors.name = \"Error name\";\r\n        isValid = false;\r\n      }\r\n      //       if (!this.product.price) {\r\n      //         this.errors.price = \"Error price\";\r\n      //         isValid = false;\r\n      //       } else if (!this.isNumber(this.product.price)) {\r\n      //         this.errors.price = \"price is Number\";\r\n      //         isValid = false;\r\n      //       }\r\n      if (!this.user.description) {\r\n        this.errors.description = \"Loi description\";\r\n        isValid = false;\r\n      }\r\n      return isValid;\r\n    },\r\n    isNumber(value) {\r\n      return /^\\d*$/.test(value);\r\n    },\r\n    save() {\r\n      if (this.validate()) {\r\n        if (this.user.id) {\r\n          this.$request\r\n            .put(`http://localhost:8000/api/users/${this.user.id}`, this.user)\r\n            .then((res) => {\r\n              if (res.data.success) {\r\n                this.$router.push({ name: \"user.list\" });\r\n                return;\r\n              }\r\n              alert(\"Errors\");\r\n            });\r\n          return;\r\n        }\r\n        // let max = 0\r\n        // let newID = 0\r\n        // // console.log(newID)\r\n        // for (let i = 0; i < this.products.length; i++) {\r\n        //   console.log(this.products.length)\r\n        //   if (this.products[i].id > max) {\r\n        //     max = this.products[i].id\r\n        //   }\r\n        //   // return this.product.id\r\n        // }\r\n        // newID = max + 1\r\n        // this.product.id = newID\r\n        // console.log(newID)\r\n        this.product.time = new Date().toLocaleString();\r\n        this.$request\r\n          .post(\"http://localhost:8000/api/users\", this.user)\r\n          .then((res) => {\r\n            if (res.data.success) {\r\n              this.$router.push({ name: \"product.list\" });\r\n            }\r\n          });\r\n      }\r\n    },\r\n    getUsers(userId) {\r\n      this.$request.get(`http://localhost:8000/api/users/${userId}`).then((res) => {\r\n        this.user = res.data;\r\n        // console.log(this.product)\r\n      });\r\n    },\r\n    reset() {\r\n      (this.user.name = \"\"),\r\n        (this.user.price = \"\"),\r\n        (this.user.description = \"\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.form-group {\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}